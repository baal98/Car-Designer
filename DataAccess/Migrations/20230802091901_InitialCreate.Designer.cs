// <auto-generated />
using System;
using AdvertisingAgency.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdvertisingAgency.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230802091901_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FriendlyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccountCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.BaseObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("angle")
                        .HasColumnType("float");

                    b.Property<string>("backgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("cropX")
                        .HasColumnType("float");

                    b.Property<double?>("cropY")
                        .HasColumnType("float");

                    b.Property<string>("crossOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fillRule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("flipX")
                        .HasColumnType("bit");

                    b.Property<bool?>("flipY")
                        .HasColumnType("bit");

                    b.Property<string>("globalCompositeOperation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("height")
                        .HasColumnType("float");

                    b.Property<double?>("left")
                        .HasColumnType("float");

                    b.Property<double?>("opacity")
                        .HasColumnType("float");

                    b.Property<string>("originX")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("originY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paintFirst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("rootId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("scaleX")
                        .HasColumnType("float");

                    b.Property<double?>("scaleY")
                        .HasColumnType("float");

                    b.Property<string>("shadow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("skewX")
                        .HasColumnType("float");

                    b.Property<double?>("skewY")
                        .HasColumnType("float");

                    b.Property<string>("src")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stroke")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strokeDashArray")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("strokeDashOffset")
                        .HasColumnType("int");

                    b.Property<string>("strokeLineCap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strokeLineJoin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("strokeMiterLimit")
                        .HasColumnType("int");

                    b.Property<bool?>("strokeUniform")
                        .HasColumnType("bit");

                    b.Property<int?>("strokeWidth")
                        .HasColumnType("int");

                    b.Property<double?>("top")
                        .HasColumnType("float");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("visible")
                        .HasColumnType("bit");

                    b.Property<double?>("width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("rootId")
                        .IsUnique();

                    b.ToTable("BaseObjects");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.Canvas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BaseObjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Canvases");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.CanvasObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PathAsString")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("path");

                    b.Property<double?>("angle")
                        .HasColumnType("float");

                    b.Property<string>("backgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("charSpacing")
                        .HasColumnType("int");

                    b.Property<double?>("cropX")
                        .HasColumnType("float");

                    b.Property<double?>("cropY")
                        .HasColumnType("float");

                    b.Property<string>("crossOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("direction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fill")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fillRule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("flipX")
                        .HasColumnType("bit");

                    b.Property<bool?>("flipY")
                        .HasColumnType("bit");

                    b.Property<string>("fontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("fontSize")
                        .HasColumnType("int");

                    b.Property<string>("fontStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fontWeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("globalCompositeOperation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("height")
                        .HasColumnType("float");

                    b.Property<double?>("left")
                        .HasColumnType("float");

                    b.Property<double?>("lineHeight")
                        .HasColumnType("float");

                    b.Property<bool?>("linethrough")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("opacity")
                        .HasColumnType("float");

                    b.Property<string>("originX")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("originY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("overline")
                        .HasColumnType("bit");

                    b.Property<string>("paintFirst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pathAlign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pathSide")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("pathStartOffset")
                        .HasColumnType("int");

                    b.Property<decimal?>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("rootId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("scaleX")
                        .HasColumnType("float");

                    b.Property<double?>("scaleY")
                        .HasColumnType("float");

                    b.Property<string>("shadow")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("skewX")
                        .HasColumnType("float");

                    b.Property<double?>("skewY")
                        .HasColumnType("float");

                    b.Property<string>("src")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stroke")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strokeDashArray")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("strokeDashOffset")
                        .HasColumnType("int");

                    b.Property<string>("strokeLineCap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strokeLineJoin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("strokeMiterLimit")
                        .HasColumnType("int");

                    b.Property<bool?>("strokeUniform")
                        .HasColumnType("bit");

                    b.Property<int?>("strokeWidth")
                        .HasColumnType("int");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("textAlign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("textBackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("top")
                        .HasColumnType("float");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("underline")
                        .HasColumnType("bit");

                    b.Property<string>("version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("visible")
                        .HasColumnType("bit");

                    b.Property<double?>("width")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("rootId");

                    b.ToTable("objects");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid?>("CanvasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryTypeName")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.Chat.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasMaxLength(40)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double?>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<string>("ProductTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuildingNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntendId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Street")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CanvasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.SharedProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CanvasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CollectingUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SharingUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SharingUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CanvasId")
                        .IsUnique()
                        .HasFilter("[CanvasId] IS NOT NULL");

                    b.HasIndex("SharingUserId1");

                    b.ToTable("SharedProjects");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.Address", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AdvertisingAgency.Data.Data.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AdvertisingAgency.Data.Data.Models.ApplicationUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("AdvertisingAgency.Data.Data.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdvertisingAgency.Data.Data.Models.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Address");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.BaseObject", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.Canvas", "root")
                        .WithOne("BaseObject")
                        .HasForeignKey("AdvertisingAgency.Data.Data.Models.BaseObject", "rootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("root");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.Canvas", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.ApplicationUser", "User")
                        .WithMany("Canvases")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.CanvasObject", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.Canvas", "root")
                        .WithMany("Objects")
                        .HasForeignKey("rootId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("root");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.CartItem", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.Product", "Product")
                        .WithMany("Items")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdvertisingAgency.Data.Data.Models.ShoppingCart", "ShoppingCart")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.Chat.ChatMessage", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.ApplicationUser", "User")
                        .WithMany("ChatMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.City", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.OrderDetail", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.OrderHeader", "OrderHeader")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvertisingAgency.Data.Data.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.OrderHeader", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvertisingAgency.Data.Data.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("AdvertisingAgency.Data.Data.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.SharedProject", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.Canvas", "Canvas")
                        .WithOne()
                        .HasForeignKey("AdvertisingAgency.Data.Data.Models.SharedProject", "CanvasId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AdvertisingAgency.Data.Data.Models.ApplicationUser", "SharingUser")
                        .WithMany()
                        .HasForeignKey("SharingUserId1");

                    b.Navigation("Canvas");

                    b.Navigation("SharingUser");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.ShoppingCart", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdvertisingAgency.Data.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AdvertisingAgency.Data.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Canvases");

                    b.Navigation("ChatMessages");

                    b.Navigation("OrderHeaders");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.Canvas", b =>
                {
                    b.Navigation("BaseObject");

                    b.Navigation("Objects");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.OrderHeader", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.Product", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("AdvertisingAgency.Data.Data.Models.ShoppingCart", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
