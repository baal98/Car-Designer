@using System.Security.Claims
@using System.Text.RegularExpressions
@using System.Web
@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model IEnumerable<Canvas>

@{
    ViewData["Title"] = "Canvas Index";
    ViewData["BodyClass"] = "canvas-body";
    Layout = "_Layout";
}

<link rel="stylesheet" href="~/MVC CSS_JS/Styles.css">

<div id="spinner" class="ring" style="z-index: 9999;">
    Loading
    <span></span>
</div>

<div class="background-image-div" style="position:fixed; top:0; left:0; height:100vh; width:100vw; z-index:-1; background-image: url('@Url.Content("~/Images/BackgroundUserAllProject.jpg")'); background-size: cover; background-repeat: no-repeat; background-position: center;"></div>

<div style="display: flex; align-items: center;">
    <h1 class="panel-title">My Designs</h1>
    <a asp-action="Create" class="btn-primary" style="font-size: 12px; font-weight: bold; margin-left: 10px;">New Project</a>
</div>

<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

@if (TempData["SuccessMessage"] != null)
{
    <script>
        Swal.fire({
            title: 'Supeeer!',
            html: '<img src="@Url.Content("~/Images/smyleSuccess.png")" /> <br/> <p>@TempData["SuccessMessage"].ToString()</p>',
            confirmButtonText: 'Okay',
            showClass: {
                popup: 'animate__animated animate__fadeInDown'
            },
            hideClass: {
                popup: 'animate__animated animate__fadeOutUp'
            }
        });
    </script>
}

<div class="row">
    @foreach (var item in Model)
    {
        <div class="col-md-3" style="padding-right: 0px;">
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title" style="margin: 5px 0;">@item.Name</h5>
                    <img class="card-img-top" style="cursor:pointer; width:100%; height: auto; margin-top: 6px" src="@item.Thumbnail" alt="Canvas Thumbnail">
                    <p class="card-text">@GetShortDescription(item.Description)</p>
                    <div class="button-container">
                        <div style="display: flex; justify-content: space-between;">
                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-primary btn-fixed-size">Details</a>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-fixed-size">Delete</a>
                            <form action="/Project/share" method="post">
                                <input type="hidden" name="CanvasId" value="@item.Id" />
                                <input type="hidden" name="Thumbnail" value="@item.Thumbnail" />
                                <input type="hidden" name="UserId" value="@User.FindFirstValue(ClaimTypes.NameIdentifier)" />
                                <button type="submit" class="btn btn-success btn-fixed-size">Share</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal -->
<div class="modal fade" id="imagePreviewModal" tabindex="-1" aria-labelledby="imagePreviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-body d-flex justify-content-center">
                <img id="modalImage" src="" class="img-fluid w-100" />
            </div>
        </div>
    </div>
</div>


<script src="~/js/jquery.min.js"></script>
<!-- Генериране на пагинация -->
@Html.Partial("Partials/_Pagination")

@functions {
    public HtmlString GetShortDescription(string description, int maxLength = 29)
    {
        if (string.IsNullOrEmpty(description))
            return new HtmlString("<span class='text-danger'>No description available.</span>");

        // Remove HTML tags
        var regex = new Regex("<.*?>", RegexOptions.Multiline);
        var plainTextDescription = regex.Replace(description, "");

        if (plainTextDescription.Length <= maxLength) return new HtmlString(HttpUtility.HtmlEncode(description));

        var shortDesc = plainTextDescription.Substring(0, maxLength);
        return new HtmlString(HttpUtility.HtmlEncode(shortDesc + "..."));
    }
}


<script src="~/MVC CSS_JS/scripts.js"></script>

